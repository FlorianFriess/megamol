<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="proteinDeferred">
    
    <include file="common" />
    
    <namespace name="contour">
        <namespace name="final">
        <shader name="vertex">
            <snippet type="version">110</snippet>
            <snippet name="main" type="string">
            <!--
varying vec3 posES;
void main(void) {
    gl_Position = gl_ModelViewProjectionMatrix*gl_Vertex;
    gl_TexCoord[0] = gl_MultiTexCoord0;
    posES = gl_Normal;
}
            -->
            </snippet>
        </shader>
        <shader name="fragment">
            <snippet type="version">110</snippet>
            <snippet name="::common::lighting::simple" />
            <snippet type="string">
            <!--
#extension GL_EXT_gpu_shader4 : enable

uniform sampler2D depthBuff;
uniform sampler2D colorBuff;
uniform sampler2D normalBuff;
uniform int renderMode;

uniform vec2 clip;
uniform vec2 winSize;

varying vec3 posES;

void main(void) {
    vec4 color  = texture2D(colorBuff, gl_TexCoord[0].st);
    // Edges + colour
    if(renderMode == 0) { 
        // TODO
        gl_FragColor = color;
    }
    // Edges
    else if(renderMode == 1) { 
        // TODO
        gl_FragColor = color;
    }
    // Depth
    else if(renderMode == 2) { 
        gl_FragColor = texelFetch2D(depthBuff, ivec2(gl_FragCoord.xy), 0);
    }
    // Normal
    else if(renderMode == 3) { 
        vec3 normal = normalize(texture2D(normalBuff, gl_TexCoord[0].st).xyz);
        gl_FragColor = vec4(normal, color.a);
    }
    // Color
    else if(renderMode == 4) { 
        gl_FragColor = color;
    }
}
            -->
            </snippet>
        </shader>
        </namespace>
    </namespace>
    
</btf>
