#
# Makefile
# Protein (MegaMol)
#
# Copyright (C) 2008-2010 by VISUS (Universitaet Stuttgart).
# Alle Rechte vorbehalten.
#

include common.mk
include ExtLibs.mk

# Target name
# TODO: Change the name "Template" to the name of your plugin
TargetName := Protein
# subdirectories below $(InputRootDir)
InputRootDir := $(InputDir)
InputDirs := .
IncludeDir := $(IncludeDir) $(mmcorepath)
VISlibs := net gl graphics sys math base


# Additional compiler flags
CompilerFlags := $(CompilerFlags) -fPIC -fopenmp
ExcludeFromBuild += ./dllmain.cpp


# Libraries
LIBS := $(LIBS) m pthread pam pam_misc dl ncurses uuid GL GLU

# Additional linker flags
LinkerFlags := $(LinkerFlags) -shared -Wl,-Bsymbolic -lgomp

# C
CC               := gcc
CReleaseDir      := $(ReleaseDir)/C
CDebugDir        := $(DebugDir)/C
C_SRCS           := $(filter-out $(ExcludeFromBuild), $(foreach InputDir, $(InputDirs), $(wildcard $(InputDir)/*.c)))
C_R_OBS          := $(addprefix $(IntDir)/$(CudaReleaseDir)/, $(patsubst %.c, %.o, $(C_SRCS)))
C_D_OBS          := $(addprefix $(IntDir)/$(CudaDebugDir)/, $(patsubst %.c, %.o, $(C_SRCS)))
C_DEPS           := $(addprefix $(IntDir)/$(CDebugDir)/, $(patsubst %.c, %.d, $(C_SRCS)))\
                    $(addprefix $(IntDir)/$(CReleaseDir)/, $(patsubst %.c, %.d, $(C_SRCS)))

# cuda
NVCC              := $(CudaInstallPath)/bin/nvcc
LinkerFlags       := $(LinkerFlags) -L$(CudaInstallPath)/lib64 -L$(CudaSdkPath)/C/common/lib/linux    
CudaReleaseDir    := $(ReleaseDir)/Cuda
CudaDebugDir      := $(DebugDir)/Cuda
# note: not the dependencies (i.e. particle_kernel.cu)!
CU_SOURCES        := particleSystem.cu filter_cuda.cu
CU_R_OBS          := $(addprefix $(IntDir)/$(CudaReleaseDir)/, $(patsubst %.cu, %.o, $(CU_SOURCES)))
CU_D_OBS          := $(addprefix $(IntDir)/$(CudaDebugDir)/, $(patsubst %.cu, %.o, $(CU_SOURCES)))
LIBS              := $(LIBS) cudart


# Collect Files
# WARNING: $(InputDirs) MUST be relative paths!
CPP_SRCS := $(filter-out $(ExcludeFromBuild), $(foreach InputDir, $(InputDirs), $(wildcard $(InputDir)/*.cpp)))
CPP_DEPS := $(addprefix $(IntDir)/$(DebugDir)/, $(patsubst %.cpp, %.d, $(CPP_SRCS)))\
	$(addprefix $(IntDir)/$(ReleaseDir)/, $(patsubst %.cpp, %.d, $(CPP_SRCS)))
CPP_D_OBJS := $(addprefix $(IntDir)/$(DebugDir)/, $(patsubst %.cpp, %.o, $(CPP_SRCS)))
CPP_R_OBJS := $(addprefix $(IntDir)/$(ReleaseDir)/, $(patsubst %.cpp, %.o, $(CPP_SRCS)))

IncludeDir := $(IncludeDir) $(addprefix $(vislibpath)/,$(addsuffix /include,$(VISlibs)))
# note: cuda include dirs have to be added after vislib include dirs
IncludeDir := $(IncludeDir) $(CudaInstallPath)/include $(CudaSdkPath)/C/common/inc

DebugLinkerFlags := $(DebugLinkerFlags) $(addprefix -lvislib,$(addsuffix $(BITS)d,$(VISlibs)))
ReleaseLinkerFlags := $(ReleaseLinkerFlags) $(addprefix -lvislib,$(addsuffix $(BITS),$(VISlibs)))

CPPFLAGS := $(CompilerFlags) $(addprefix -I, $(IncludeDir)) $(addprefix -isystem, $(SystemIncludeDir))
LDFLAGS := $(LinkerFlags) -L$(vislibpath)/lib -L$(expatpath)/lib

# cuda
NVCCFLAGS := -DUNIX -D_GNU_SOURCE -D_LIN$(BITS) $(addprefix -I, $(IncludeDir)) -Xcompiler -fPIC
CU_DEPS := $(addprefix $(IntDir)/$(CudaDebugDir)/, $(patsubst %.cu, %.d, $(CU_SOURCES)))\
	$(addprefix $(IntDir)/$(CudaReleaseDir)/, $(patsubst %.cu, %.d, $(CU_SOURCES)))


all: $(TargetName)d $(TargetName)

# Rules for plugins in $(SolOutputDir):

$(TargetName)d: $(IntDir)/$(DebugDir)/$(TargetName)$(BITS)d.lin$(BITS).mmplg
	@mkdir -p $(outbin)
	cp $< $(outbin)/$(TargetName)$(BITS)d.lin$(BITS).mmplg

$(TargetName): $(IntDir)/$(ReleaseDir)/$(TargetName)$(BITS).lin$(BITS).mmplg
	@mkdir -p $(outbin)
	cp $< $(outbin)/$(TargetName)$(BITS).lin$(BITS).mmplg

# Rules for intermediate plugins:

$(IntDir)/$(DebugDir)/$(TargetName)$(BITS)d.lin$(BITS).mmplg: Makefile $(addprefix $(IntDir)/$(DebugDir)/, $(patsubst %.cpp, %.o, $(CPP_SRCS)))\
	$(addprefix $(IntDir)/$(CudaDebugDir)/, $(patsubst %.cu, %.o, $(CU_SOURCES)))\
	$(addprefix $(IntDir)/$(CDebugDir)/, $(patsubst %.c, %.o, $(C_SRCS)))
	@echo -e '\E[1;32;40m'"LNK "'\E[0;32;40m'"$(IntDir)/$(DebugDir)/$(TargetName)$(BITS)d.lin$(BITS).mmplg: "
	@tput sgr0
	$(Q)$(LINK) $(LDFLAGS) $(CPP_D_OBJS) $(CU_D_OBS) $(C_D_OBJS) $(addprefix -l,$(LIBS)) $(DebugLinkerFlags) \
	-o $(IntDir)/$(DebugDir)/$(TargetName)$(BITS)d.lin$(BITS).mmplg

$(IntDir)/$(ReleaseDir)/$(TargetName)$(BITS).lin$(BITS).mmplg: Makefile $(addprefix $(IntDir)/$(ReleaseDir)/, $(patsubst %.cpp, %.o, $(CPP_SRCS)))\
	$(addprefix $(IntDir)/$(CudaReleaseDir)/, $(patsubst %.cu, %.o, $(CU_SOURCES)))\
	$(addprefix $(IntDir)/$(CReleaseDir)/, $(patsubst %.c, %.o, $(C_SRCS)))
	@echo -e '\E[1;32;40m'"LNK "'\E[0;32;40m'"$(IntDir)/$(ReleaseDir)/$(TargetName)$(BITS).lin$(BITS).mmplg: "
	@tput sgr0
	$(Q)$(LINK) $(LDFLAGS) $(CPP_R_OBJS) $(CU_R_OBS) $(C_R_OBJS) $(addprefix -l,$(LIBS)) $(ReleaseLinkerFlags) \
	-o $(IntDir)/$(ReleaseDir)/$(TargetName)$(BITS).lin$(BITS).mmplg

# Rules for dependencies:

$(IntDir)/$(CudaDebugDir)/%.d: $(InputDir)/%.cu Makefile
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"DEP "'\E[0;32;40m'"$@: "
	@tput sgr0
	@echo -n $(dir $@) > $@
	$(Q)$(NVCC) -M -g -G $(NVCCFLAGS) $< >> $@
# -g debug information for host code
# -G debug information for device code

$(IntDir)/$(CudaReleaseDir)/%.d: $(InputDir)/%.cu Makefile
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"DEP "'\E[0;32;40m'"$@: "
	@tput sgr0
	@echo -n $(dir $@) > $@
	$(Q)$(NVCC) -M $(NVCCFLAGS) $< >> $@

$(IntDir)/$(CDebugDir)/%.d: $(InputDir)/%.c Makefile
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"DEP "'\E[0;32;40m'"$@: "
	@tput sgr0
	@echo -n $(dir $@) > $@
	$(Q)$(CC) -MM $(CPPFLAGS) $(DebugCompilerFlags) $< >> $@

$(IntDir)/$(CReleaseDir)/%.d: $(InputDir)/%.c Makefile
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"DEP "'\E[0;32;40m'"$@: "
	@tput sgr0
	@echo -n $(dir $@) > $@
	$(Q)$(CC) -MM $(CPPFLAGS) $(ReleaseCompilerFlags) $< >> $@
    
$(IntDir)/$(DebugDir)/%.d: $(InputDir)/%.cpp Makefile
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"DEP "'\E[0;32;40m'"$@: "
	@tput sgr0
	@echo -n $(dir $@) > $@
	$(Q)$(CPP) -MM $(CPPFLAGS) $(DebugCompilerFlags) $< >> $@

$(IntDir)/$(ReleaseDir)/%.d: $(InputDir)/%.cpp Makefile
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"DEP "'\E[0;32;40m'"$@: "
	@tput sgr0
	@echo -n $(dir $@) > $@
	$(Q)$(CPP) -MM $(CPPFLAGS) $(ReleaseCompilerFlags) $< >> $@

ifneq ($(MAKECMDGOALS), clean)
ifneq ($(MAKECMDGOALS), sweep)
-include $(CPP_DEPS)
-include $(CU_DEPS)
-include $(C_DEPS)
endif
endif

# Rules for object files:

$(IntDir)/$(CudaDebugDir)/%.o:
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"NVCC "'\E[0;32;40m'"$@: "
	@tput sgr0
	$(Q)$(NVCC) -g -G -c $(NVCCFLAGS) $< -o $@

$(IntDir)/$(CudaReleaseDir)/%.o:
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"NVCC "'\E[0;32;40m'"$@: "
	@tput sgr0
	$(Q)$(NVCC) -c $(NVCCFLAGS) $< -o $@

$(IntDir)/$(CDebugDir)/%.o:
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"CC "'\E[0;32;40m'"$@: "
	@tput sgr0
	$(Q)$(CC) -c $(CPPFLAGS) $(DebugCompilerFlags) -o $@ $<

$(IntDir)/$(CReleaseDir)/%.o:
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"CC "'\E[0;32;40m'"$@: "
	@tput sgr0
	$(Q)$(CC) -c $(CPPFLAGS) $(ReleaseCompilerFlags) -o $@ $<

$(IntDir)/$(DebugDir)/%.o:
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"CPP "'\E[0;32;40m'"$@: "
	@tput sgr0
	$(Q)$(CPP) -c $(CPPFLAGS) $(DebugCompilerFlags) -o $@ $<

$(IntDir)/$(ReleaseDir)/%.o:
	@mkdir -p $(dir $@)
	@echo -e '\E[1;32;40m'"CPP "'\E[0;32;40m'"$@: "
	@tput sgr0
	$(Q)$(CPP) -c $(CPPFLAGS) $(ReleaseCompilerFlags) -o $@ $<

# Cleanup rules:

clean: sweep
	rm -f $(outbin)/$(TargetName)$(BITS)d.lin$(BITS).mmplg \
	$(outbin)/$(TargetName)$(BITS).lin$(BITS).mmplg

sweep:
	rm -f $(CPP_DEPS)
	rm -f $(CU_DEPS)
	rm -f $(C_DEPS)
	rm -rf $(IntDir)/*

rebuild: clean all

.PHONY: clean sweep rebuild tags

