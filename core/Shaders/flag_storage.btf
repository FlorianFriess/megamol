<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="flag_storage">
 
    <snippet name="vert_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

const uint FLAG_ENABLED = 1u << 0;
const uint FLAG_FILTERED = 1u << 1;
const uint FLAG_SELECTED = 1u << 2;
const uint FLAG_SOFTSELECTED = 1u << 3;

uniform uint flag_offset;

uniform vec4 flag_color_enabled;
uniform vec4 flag_color_filtered;
uniform vec4 flag_color_selected;
uniform vec4 flag_color_softselected;

#ifdef FLAG_STORAGE_SSBO

    layout(std430, binding = 1) buffer Flags
    {
        coherent uint flags[];
    };

#else

    in uint flags[1];

#endif // FLAG_STORAGE_SSBO 

        ]]>
    </snippet>

    <snippet name="vert_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    uint flag = uint(0);

#ifdef FLAG_STORAGE_SSBO

    flag = flags[(flag_offset + gl_VertexID)];

#else

    flag = flag_offset + flags[0];

#endif // FLAG_STORAGE_SSBO

    // Enabled
    if ((flag & FLAG_ENABLED) == FLAG_ENABLED) {
        //vertColor = flag_color_enabled;
    } else {

    }   

    // Filtered
    if ((flag & FLAG_FILTERED) == FLAG_FILTERED) {
        //vertColor = flag_color_filtered;
    } else {

    }

    // Selected
    if ((flag & FLAG_SELECTED) == FLAG_SELECTED) {
        vertColor = flag_color_selected;
    } else {

    }

    // Soft Selected
    if ((flag & FLAG_SOFTSELECTED) == FLAG_SOFTSELECTED) {
        //vertColor = flag_color_softselected;
    } else {

    }    

#endif // FLAG_STORAGE

        ]]>
    </snippet>

</btf>

 