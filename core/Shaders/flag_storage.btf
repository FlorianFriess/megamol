<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="flag_storage">
 
<!-- Requires 'vertColor' and/or 'geoColor' to be defined as color variable. -->

    <snippet name="vert_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

const uint FLAG_ENABLED = 1u << 0;
const uint FLAG_FILTERED = 1u << 1;
const uint FLAG_SELECTED = 1u << 2;
const uint FLAG_SOFTSELECTED = 1u << 3;

uniform uint flagOffset;

uniform vec4 flagSelectedCol;
uniform vec4 flagSoftSelectedCol;

#ifdef FLAG_STORAGE_SSBO
    layout(std430, binding = 4) buffer flags
    {
        coherent uint inFlags[];
    };
#else
    in uint inFlags[1];
#endif // FLAG_STORAGE_SSBO 

flat out int flagDiscard;

// Applying flags
void ApplyFlags(const in uint currentFlag, inout int discardFlag, inout vec4 colorFlag) {

    // Enabled
    //if ((currentFlag & FLAG_ENABLED) == FLAG_ENABLED) {
    //} 

    // Filtered
    if ((currentFlag & FLAG_FILTERED) == FLAG_FILTERED) {
        discardFlag = 1;
    } 

    // Selected
    if ((currentFlag & FLAG_SELECTED) == FLAG_SELECTED) {
        colorFlag = flagSelectedCol;
    } 

    // Soft Selected
    if ((currentFlag & FLAG_SOFTSELECTED) == FLAG_SOFTSELECTED) {
        colorFlag = flagSoftSelectedCol;
    }
}
        ]]>
    </snippet>

    <snippet name="vert_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    flagDiscard = 0;
    uint flag = uint(0);

#ifdef FLAG_STORAGE_SSBO
    flag = inFlags[(flagOffset + gl_VertexID)];
#else
    flag = flagOffset + inFlags[0];
#endif // FLAG_STORAGE_SSBO

    ApplyFlags(flag, flagDiscard, vertColor);

#endif // FLAG_STORAGE

        ]]>
    </snippet>

    <snippet name="frag_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

flat in int flagDiscard;

        ]]>
    </snippet>

    <snippet name="frag_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    if (flagDiscard != 0) {
        discard;
    }

#endif // FLAG_STORAGE

        ]]>
    </snippet>

<!-- ###### Addintional code when using Geometry Shader mode ##### -->

    <snippet name="geo_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

flat in  int flagDiscard[1];
flat out int geoFlagDiscard;

        ]]>
    </snippet>

    <snippet name="geo_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    geoFlagDiscard = flagDiscard[0];

#endif // FLAG_STORAGE

        ]]>
    </snippet>


    <snippet name="geo_frag_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

flat in int geoFlagDiscard;

        ]]>
    </snippet>

    <snippet name="geo_frag_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    if (geoFlagDiscard != 0) {
        discard;
    }

#endif // FLAG_STORAGE

        ]]>
    </snippet>

<!-- ###### Addintional code when using Geometry Shader mode of Ambient Occlusion ##### -->

    <!-- Needs 'vert_attributes' snippet to prepended in shader -->
    <snippet name="mdao_vert_additional_attributes" type="string">
        <![CDATA[

#ifdef FLAG_STORAGE

    out uint vgFlag;
    out vec4 flagColor;

#endif // FLAG_STORAGE

        ]]>
    </snippet>

    <snippet name="mdao_vert_code" type="string">
        <![CDATA[

#ifdef FLAG_STORAGE

    flagDiscard = 0;
    vgFlag = uint(0);

#ifdef FLAG_STORAGE_SSBO
    vgFlag = inFlags[(flagOffset + gl_VertexID)];
#else
    vgFlag = flagOffset + inFlags[0];
#endif // FLAG_STORAGE_SSBO

    ApplyFlags(vgFlag, flagDiscard, flagColor);

#endif // FLAG_STORAGE

        ]]>
    </snippet>

    <snippet name="mdao_geo_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

flat in int flagDiscard[1];
in uint vgFlag[1];
in vec4 flagColor[1];

flat out int  geoFlagDiscard;

        ]]>
    </snippet>

    <snippet name="mdao_geo_code" type="string">
        <![CDATA[

#ifdef FLAG_STORAGE

    if (vgFlag[0] != uint(0)) {
        vertColor = flagColor[0];
    }
    geoFlagDiscard = flagDiscard[0];

#endif // FLAG_STORAGE

        ]]>
    </snippet>

</btf>

 