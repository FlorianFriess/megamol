<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="sphere_flags">
 
    <snippet name="vert_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

uniform uint flagOffset;

uniform vec4 flagSelectedCol;
uniform vec4 flagSoftSelectedCol;

#ifdef FLAG_STORAGE_SSBO
    layout(std430, binding = 4) buffer flags
    {
        coherent uint inFlags[];
    };
#else
    in uint inFlags[1];
#endif // FLAG_STORAGE_SSBO 

flat out int flagDiscard;

// Applying flags
void ApplyFlags(const in uint currentFlag, inout int discardFlag, inout vec4 colorFlag) {

    // Visibility: Not Enabled
    discardFlag = int(false);
    if (!bitflag_isVisible(currentFlag)) {
        discardFlag = int(true);
    } 
    // Selected
    if (bitflag_test(currentFlag, FLAG_SELECTED, FLAG_SELECTED)) {
        colorFlag = flagSelectedCol;
    }
    // Soft Selected
    if (bitflag_test(currentFlag, FLAG_SOFTSELECTED, FLAG_SOFTSELECTED)) {
        colorFlag = flagSoftSelectedCol;
    }
}
        ]]>
    </snippet>

    <snippet name="vert_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    flagDiscard = 0;
    uint flag = uint(0);

#ifdef FLAG_STORAGE_SSBO
    flag = inFlags[(flagOffset + gl_VertexID)];
#else
    flag = flagOffset + inFlags[0];
#endif // FLAG_STORAGE_SSBO

    ApplyFlags(flag, flagDiscard, vertColor);

#endif // FLAG_STORAGE

        ]]>
    </snippet>

    <snippet name="frag_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

flat in int flagDiscard;

        ]]>
    </snippet>

    <snippet name="frag_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    if (flagDiscard != 0) {
        discard;
    }

#endif // FLAG_STORAGE

        ]]>
    </snippet>

<!-- ###### Addintional code when using Geometry Shader mode ##### -->

    <snippet name="geo_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

flat in  int flagDiscard[1];
flat out int geoFlagDiscard;

        ]]>
    </snippet>

    <snippet name="geo_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    geoFlagDiscard = flagDiscard[0];

#endif // FLAG_STORAGE

        ]]>
    </snippet>


    <snippet name="geo_frag_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

flat in int geoFlagDiscard;

        ]]>
    </snippet>

    <snippet name="geo_frag_code" type="string">
        <![CDATA[

 #ifdef FLAG_STORAGE

    if (geoFlagDiscard != 0) {
        discard;
    }

#endif // FLAG_STORAGE

        ]]>
    </snippet>

<!-- ###### Addintional code when using Geometry Shader mode of Ambient Occlusion ##### -->

    <!-- Needs 'vert_attributes' snippet to be prepended -->
    <snippet name="mdao_vert_additional_attributes" type="string">
        <![CDATA[

#ifdef FLAG_STORAGE

flat out vec4 flagColor;

#endif // FLAG_STORAGE

        ]]>
    </snippet>

    <snippet name="mdao_vert_code" type="string">
        <![CDATA[

#ifdef FLAG_STORAGE

    flagDiscard = 0;
    flagColor = vec4(0.0, 0.0, 0.0, 0.0);
    uint flag = uint(0);

#ifdef FLAG_STORAGE_SSBO
    flag = inFlags[(flagOffset + gl_VertexID)];
#else
    flag = flagOffset + inFlags[0];
#endif // FLAG_STORAGE_SSBO

    ApplyFlags(flag, flagDiscard, flagColor);

#endif // FLAG_STORAGE

        ]]>
    </snippet>

    <snippet name="mdao_geo_attributes" type="string">
        <![CDATA[

#define FLAG_STORAGE

flat in int flagDiscard[1];
flat in vec4 flagColor[1];

flat out int geoFlagDiscard;

        ]]>
    </snippet>

    <snippet name="mdao_geo_code" type="string">
        <![CDATA[

#ifdef FLAG_STORAGE

    if (flagColor[0] != vec4(0.0)) {
        vertColor = flagColor[0];
    }
    geoFlagDiscard = flagDiscard[0];

#endif // FLAG_STORAGE

        ]]>
    </snippet>

</btf>

 