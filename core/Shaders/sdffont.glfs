/*
* Fragment shader for SDFFont
*/
#version 400


in      vec2      texCoord;
in      float     smoothing;

uniform vec4      color;
uniform sampler2D fontTex;

layout(location = 0) out vec4 outFragColor;


/*
* Function Smoothstep
*
* Source: https://en.wikipedia.org/wiki/Smoothstep
*/
void Smoothstep(in float edge0, in float edge1, inout float x) {
    float t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
    // smoothstep:
    //x = (t * t * (3.0 - 2.0 * t));
    // smootherstep:
    x = (t * t * t * (t * (t * 6.0 - 15.0) + 10.0));
    // smootheststep:
    //x = (t * t * t * t * (t * (t * (70.0 - t * 20.0 ) - 84.0) + 35.0));
}


/*
* MAIN
*/
void main(void)
{
    float distance  = texture2D(fontTex, texCoord).g; // Distance value is stored in green channel, see SDFFont::loadFontTexture()
    float border    = 0.5;
    Smoothstep((border - smoothing), (border + smoothing), distance);
    float alpha     = clamp(distance, 0.0, 1.0);

    if (alpha == 0.0) {
        discard; // Prevent Z-fighting
    }
    else {
        outFragColor = vec4(color.rgb, alpha);
    }
}

 // DO NOT DELETE THIS LINE (last character will be set to '\0') 