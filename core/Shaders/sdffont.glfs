/*
* Fragment shader for SDFFont
*/
#version 400

#define RENDERTYPE_FILL    1
#define RENDERTYPE_OUTLINE 2

in      vec2      texCoord;

uniform vec4      color;
uniform sampler2D fontTex;
uniform int       renderType = 1;

layout(location = 0) out vec4 outFragColor;


/*
* MAIN
*/
void main(void) {

    float outlineWidth = 0.025; 
    float sdfBorder    = 0.5; 
     
    float distance = texture2D(fontTex, texCoord).g;  // Distance value is stored in green channel, see SDFFont::loadFontTexture()

    if (distance == 0.0) { 
        discard;
    }

    float smootingEdge = 0.7 * length(vec2(dFdx(distance), dFdy(distance)));  // dFdxFine(), dFdyFine() only for glsl >=450

    if (renderType == RENDERTYPE_FILL) { 

        distance = smoothstep((sdfBorder - smootingEdge), (sdfBorder + smootingEdge), distance);
    }
    else if  (renderType == RENDERTYPE_OUTLINE) {

        if (distance > (sdfBorder + smootingEdge + outlineWidth)) {
            discard;
        }

        if (distance < sdfBorder) {
            distance = smoothstep((sdfBorder - smootingEdge - outlineWidth), (sdfBorder + smootingEdge - outlineWidth), distance);
        }
        else {
            distance = smoothstep((sdfBorder + smootingEdge + outlineWidth), (sdfBorder - smootingEdge + outlineWidth), distance);
        }
    }

    float alpha  = clamp(distance, 0.0, 1.0);
    outFragColor = vec4(color.rgb, alpha);
}

 // DO NOT DELETE THIS LINE (last character will be set to '\0') 