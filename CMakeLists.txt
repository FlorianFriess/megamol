#
# MegaMolâ„¢ Core
# Copyright 2015, by MegaMol Consortium
# Alle Rechte vorbehalten. All rights reserved.
#
cmake_minimum_required(VERSION 2.8)

project(MegaMolCore)

# search for 3rd party libs
find_package(vislib REQUIRED)
set(CMAKE_THREAD_PREFER_PTHREAD)
find_package(Threads REQUIRED)
find_package(EXPAT REQUIRED)
find_package(PNG REQUIRED)
find_package(OpenMP)
find_package(MPI)

set(LIBS ${vislib_LIBRARIES} ${EXPAT_LIBRARIES} ${PNG_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
include_directories(${vislib_INCLUDE_DIRS} ${EXPAT_INCLUDE_DIRS} ${PNG_INCLUDE_DIRS})
if (OPENMP_FOUND)
	#message(STATUS "comp ${OpenMP_CXX_FLAGS}")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
if (MPI_C_FOUND)
	#message(STATUS "comp ${MPI_C_COMPILE_FLAGS}")
	#message(STATUS "incl ${MPI_C_INCLUDE_PATH}")
	#message(STATUS "link ${MPI_C_LINK_FLAGS}")
	#message(STATUS "libs ${MPI_C_LIBRARIES}")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MPI_C_COMPILE_FLAGS}")
	include_directories(${MPI_C_INCLUDE_PATH})
	set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MPI_C_LINK_FLAGS}")
	set(LIBS ${LIBS} ${MPI_C_LIBRARIES})
	add_definitions(-DWITH_MPI -DOMPI_SKIP_MPICXX -DMPICH_SKIP_MPICXX)
endif()

# processor word size detection
if (CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(BITS 64)
else()
	set(BITS 32)
endif()

# compiler options
add_definitions(-Wall -pedantic -ansi -fPIC -DUNIX -D_GNU_SOURCE -D_LIN${BITS} -DMEGAMOLCORE_EXPORTS)
if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7)
	message(STATUS "Version < 4.7")
	add_definitions(-std=c++0x)
else()
	add_definitions(-std=c++11)
endif()

# Set CXX flags for debug mode
set(CMAKE_CXX_FLAGS_DEBUG -DDEBUG)


# collect version information
add_custom_target(versioninfo ALL
	perl VersionInfo.pl .
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
	VERBATIM
	)


# Build MegaMol Core
# public header files for installation
file(GLOB_RECURSE header_files RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "include/*.h")
set(header_files ${header_files} "include/mmcore/api/MegaMolCore.std.h")
# source files for compilation
file(GLOB_RECURSE source_files RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "src/*.cpp")
list(REMOVE_ITEM source_files
	"src/moldyn/D3D11SimpleSphereRenderer.cpp"
	"src/special/AbstractStereoDisplay.cpp"
	"src/special/ColStereoDisplay.cpp"
	"src/utility/AbstractD3D11RenderObject.cpp"
	"src/utility/D3D11BoundingBox.cpp"
	"src/view/CallUpdateDirect3D.cpp"
	"src/view/ViewDirect3D.cpp"
	"src/vismol2/Mol20DataCall.cpp"
	"src/vismol2/Mol20DataSource.cpp"
	"src/vismol2/Mol20Renderer.cpp"
	"src/vismol2/Mol2Data.cpp"
	)
include_directories("include" "src")

# Note: COMMAND is empty on purpose.
# This just adds the info that the output file will be generated by versioninfo.
# versioninfo, however, remains a custom_target to ensure it will be run every time.
add_custom_command(OUTPUT "include/mmcore/api/MegaMolCore.std.h"
	COMMAND
	DEPENDS "include/mmcore/api/MegaMolCore.std.template.h" versioninfo)


# Target definition
add_library(MegaMolCore SHARED ${header_files} ${source_files})
# Set target naming conventions for different build types
set_target_properties(MegaMolCore PROPERTIES DEBUG_POSTFIX "d")
add_dependencies(MegaMolCore versioninfo)
# Note: linking private prevents that dependent projects are required to link agains all these again.
# Dependent projects only need to link against the core.so itself.
target_link_libraries(MegaMolCore PRIVATE ${LIBS})


# Installation rules for generated files
# TODO: fix the install rules::
#install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/ DESTINATION "include")
#install(TARGETS MegaMolCore DESTINATION "lib/mmcore" EXPORT MegaMolCore-target)
# Export the target to be used in the configuration file for find_package
#install(EXPORT MegaMolCore-target DESTINATION share/mmcore)
# Install configure script
#install(FILES MegaMolCoreConfig.cmake DESTINATION share/mmcore)
# TODO: Add entry to the package registry

# Export the build tree of this package. This makes it possible to include
# this package without installing. Also place a version config file for cmake
# to decide whether to take release or debug accordingly.
# Set our known paths
set(cfg_MegaMolCore_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/include)
set(cfg_CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE})
if ("${cfg_CMAKE_BUILD_TYPE}" STREQUAL "")
	set(cfg_CMAKE_BUILD_TYPE Release)
endif()
# Configure our local config script
configure_file(MegaMolCoreConfigLocal.cmake.in
	${CMAKE_BINARY_DIR}/MegaMolCoreConfig.cmake
	@ONLY)
# Configure our local version script
configure_file(MegaMolCoreConfigVersion.cmake.in
	${CMAKE_BINARY_DIR}/MegaMolCoreConfigVersion.cmake
	@ONLY)
export(TARGETS MegaMolCore FILE ${CMAKE_BINARY_DIR}/MegaMolCore-target.cmake)
export(PACKAGE MegaMolCore)

